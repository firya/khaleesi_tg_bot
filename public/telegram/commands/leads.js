import { inlineDayKeyboard } from '../keyboards.js';
import { parseDate, findDateAlias } from '../../utils.js';
import Report from '../../report/report.js';

class Leads {
  constructor() {
    this.commands = [/\/leads[\s]?(.+)[\s]([\d\.]+)?/, /^–°–¥–µ–ª–∫–∏[\s]?(.+)[\s]([\d\.]+)?/, /^üìñ –°–¥–µ–ª–∫–∏[\s]?(.+)[\s]([\d\.]+)?/];
    this.examples = [`/leads`, '–°–¥–µ–ª–∫–∏', ' üìñ –°–¥–µ–ª–∫–∏'];
  }

  help = () => {
    return `${this.examples.join(", ")} ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–º –º–µ—Ç–æ–¥–æ–º. /leads –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª`;
  }

  reply = (msg, match) => {
    if (match[2]) {
      const interval = parseDate(findDateAlias(match[2]));
      if (interval.from && interval.to) {
        return new Promise(async (resolve, reject) => {
          var report = new Report();
          var data = await report[match[1]](interval);

          var reply = [];
          if (data.data) {
            reply.push(data.data.map((lead, i) => {
              return [
                `${(i + 1)}. –°–¥–µ–ª–∫–∞ ${lead.itemType}: <a href='https://universalstal.amocrm.ru/leads/detail/${lead.id}'>${lead.id}</a> (${lead.createdAt})`,
                `–°–∞–π—Ç: ${lead.site}`,
                `–°—Ç–∞—Ç—É—Å: ${lead.status.name}`,
                `–ó–∞–º–µ—Ä: ${lead.meterDate} (${lead.meterTime})`,
                `–ó–∞–º–µ—Ä—â–∏–∫: ${lead.meterMaster}`,
                `–ê–¥—Ä–µ—Å: ${lead.address}`,
                `–ö–ª–∏–µ–Ω—Ç: ${lead.contact.name}, ${lead.contact.phones.map(phone => phone).join(', ')}`,
                `–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π: ${lead.meterInfo}`
              ].join('\n')
            }).join('\n\n'));
          } else {
            reply.push(`–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏`)
          }

          resolve({ reply: reply.join('\n') });
        });
      } else {
        return { reply: `–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${match[2]}` };
      }
    } else {
      const opts = {
        reply_markup: JSON.stringify({
          inline_keyboard: inlineDayKeyboard({ callback_data: '/leads' })
        })
      };
      return { reply: `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å`, options: opts };
    }
  }
}

export default new Leads();