import { leftPad, listToMatrix } from '../utils.js';

export const inlineMonthCalendarKeyboard = (props = {}) => {
  return listToMatrix(generateMonthCalendar(props), 3);
}

export const inlineDayKeyboard = (props = {}) => {
  return listToMatrix(generateFewDays(props), 3);
}

export const inlineFastIntervalSelect = (props = {}) => {
  var result = generateFewDays({ ...props, count: 3 });
  result = result.concat(generateMonthCalendar({ ...props, count: 3 }));

  return listToMatrix(result, 3);
}

export const inlineTimeKeyboard = (props = {}) => {
  return listToMatrix(generateTimeBlock({ ...props, from: 8, to: 24 }), 4);
}

export const defaultKeyboard = (admin = false) => {
  if (admin) {
    return [
      [
        'üì± –°–æ–∑–¥–∞–Ω–Ω—ã–µ',
      ], [
        'üìè –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ',
      ], [
        'üö™ –ó–∞–∫—Ä—ã—Ç—ã–µ',
      ], [
        '‚è± –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
        '‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç',
      ], [
        'üôé‚Äç‚ôÇÔ∏è Add User',
        'üíÄ Remove User'
      ], [
        '/help',
      ]
    ];
  } else {
    return [
      [
        'üì± –°–æ–∑–¥–∞–Ω–Ω—ã–µ',
      ], [
        'üìè –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ',
      ], [
        'üö™ –ó–∞–∫—Ä—ã—Ç—ã–µ',
      ], [
        '‚è± –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç',
        '‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç',
      ], [
        '/help'
      ]
    ];
  }
}

const generateMonthCalendar = (props = {}) => {
  props.count = props.count || 12;
  const monthList = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];

  var result = [];

  var d = new Date();
  for (let i = 0; i < props.count; i++) {
    const month = d.getMonth();
    const year = d.getFullYear();

    result.push({
      text: `${monthList[month]} ${year}`,
      callback_data: `${props.callback_data} ${leftPad(month + 1, 2)}.${year}`
    })

    d.setMonth(d.getMonth() - 1);
  }

  return result;
}

const generateFewDays = (props = {}) => {
  props.count = props.count || 3;
  var result = [];

  var textList = ['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü–æ–∑–∞–≤—á–µ—Ä–∞'];

  var d = new Date();
  for (let i = 0; i < props.count; i++) {
    const day = d.getDate();
    const month = d.getMonth();
    const year = d.getFullYear();

    result.push({
      text: (textList[i]) ? `${textList[i]}` : `${leftPad(day, 2)}.${leftPad(month + 1, 2)}.${year}`,
      callback_data: `${props.callback_data} ${leftPad(day, 2)}.${leftPad(month + 1, 2)}.${year}`
    });
    d.setDate(d.getDate() - 1);
  }

  return result;
}

const generateTimeBlock = (props = {}) => {
  props.from = props.from || 0;
  props.to = props.to || 24;

  var result = [];

  for (let i = props.from; i < props.to; i++) {
    result.push({
      text: `${leftPad(i)}:00:00`,
      callback_data: `${props.callback_data} ${leftPad(i - 3)}:00:00`
    });
  }

  return result;
}